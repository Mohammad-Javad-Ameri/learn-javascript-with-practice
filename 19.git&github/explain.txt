what is git? = git is a version control system that lets you track changes to your files over time.

why use git?

why git is important?

how to use git?

git vs github vs gitlab

branching see a photo in google

git main steps = working directory, staging area, repository

install git

git init

.git = hidden folder in our project folder for storing git files and project change history

git status = check the status of our project

make some forlder and file in our project 

git add  = add a file to the staging area

git add . = add all files to the staging area

U = untracked files , A = added files, M = modified files , D = deleted files

git rm --cached <file name> = remove a file from the staging area

git commit -m "message" = for send changes to the repository 

git commit -am "message" = for send changes to the repository and add a message

git log = check the commit history

git log --oneline = check the commit history in one line

git log --stat = check the commit history with the changes

git show <commit id> = show the changes of a specific commit before useit make sure make the git log to get the ids

git config --local alias.lgo = "log --oneline" = for make a short command

git branches = master , develop , feature

git brnches why we use it ? 

git branch = to see the current branches

git branch <branch name> = create a new branch

git switch -c <branch name> = create a new branch and switch to it

git switch <branch name> = switch to a branch

git branch -c <branch name> = create a new branch

git branch -d <branch name> = delete a branch

git branch -m <branch name> = rename a branch

fast forward vs non fast forward

git merge <branch name> = merge a branch into the current branch

for merge a branch into the master we need to make sure that they are in in the master branch

fast forward = git merge <branch name> = merge a branch into the current branch when the master branch is dont update 

non fast forward = git merge <branch name> = merge a branch into the current branch when the master branch is updated

non fast forward with conflict is when the file is modified in the master branch and in the current branch

semantic commit message in the google

every branch should have a one thing in it

git diff = compare the changes in the working directory and the staging area

git diff --staged = compare the changes in the staging area

git diff <file name> = check the changes in a file in the staging area and with working directory

git diff <id>..<id> = check the changes between two commit ids

git diff <branch name>..<branch name> = check the changes between two branches

.gitignore = ignore some files for git like node_modules or .env 

git checkout <branch name> = switch to a branch 

git log --oneline --all = check the commit history in one line

git checkout -b <branch name> = create a new branch and switch to it

git checkout <commit id> = switch to a specific commit id

git checkout Head . = switch to the last commit and discard the new changes

git restore <file name> = discard a file from the working directory  

git restore --staged <file name> = restore a file from the staging area

git restore --source <commit id> <file name> = restore a file from a specific commit id

git restore --source <branch name> <file name> = restore a file from a specific branch

git restore --source <file name> = restore a file from all the branches

git restore --source <commit id> = restore a file from all the branches

git clean -h = show the help

git clean -f = remove all the files from the staging area

git clean -f -d = remove all the files from the staging area

git reset = remove all the files 

git reset --soft = remove all the files in the repository and staging area but not in the working directory

git reset --mixed = remove all the files in the repository and staging area but not in the working directory but make the files out of the staging area

git reset --hard = remove all the files in the repository and staging area and working directory

git reset --hard <commit id> = remove all the files in the repository and staging area and working directory and switch to a specific commit id

git revert <commit id> = undo the changes of a specific commit id

conflict in revert 

revert is for the recent files and for the older files we need to use the git reset command 

git status -s = for shorter status with the changes

github and explain in the google

create github account

explain the github repositories

create a repository

git clone <url> = clone a repository from a url

git remote add origin <url> = add a remote repository

git remore -v = show the version of the remote repository

git remote remove <name> = remove a remote repository

git remote rename <old name> <new name> = rename a remote repository

git push origin <branch name> = push a branch to the remote repository

if the user its not in the git repo it get the 403 error

git push -u origin <branch name> = push a branch to the remote repository and add the remote as a remote branch

git pull origin <branch name> = pull a branch from the remote repository

git fetch origin <branch name> = fetch a branch from the remote repository

git branch -r = show all the branches in the remote repository

be hamon tedad ke branch darim git baray ma branch remote be hamoon name misaze

git switch -c <branch name> origin/<branch name> = add the changes in the remote brnach and send to a new branch 

git pull === git fetch + git merge

conflict in pull and make a conflict in the repo on github

mark down language

github pages

deploy site 

private repositories

add collaborator to repo

pull request 

make a new branch with git switch -c auth 

then push the thing and get error the make a git push --set-upstream origin auth or git push -u origin auth

pull request with conflict

fork repo and explain why we use it

make a fork in action

pull request in fork 

make pull form main repo in fork

git commit --ammend =to add the latest change to the the last commit

stash 

git stash save "message" = save the current state of the working directory

git stash list = show the stash list

git stahs pop = pop the last stash

git stash show -p -stash@{0} = show the last stash with the changes

git stash clear = clear the stash  

git blame <file name> = check the blame of a file

git bisect in google 

git tag = create a tag for versioning

git rebase in google

github desktop in practice